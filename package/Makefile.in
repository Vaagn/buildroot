ifndef MAKE
MAKE:=make
endif
ifndef HOSTMAKE
HOSTMAKE=$(MAKE)
endif
HOSTMAKE :=$(shell $(CONFIG_SHELL) -c "which $(HOSTMAKE)" || type -p $(HOSTMAKE) || echo make)

MAKE1:=$(HOSTMAKE) MAKE="$(firstword $(HOSTMAKE)) -j1"
MAKE:=$(HOSTMAKE) -j$(BR2_JLEVEL)

# installation targets
ifeq ($(BR2_HAVE_INFOPAGES),y)
MAKE_INSTALL_INFO:=install-info
endif
ifeq ($(BR2_HAVE_MANPAGES),y)
MAKE_INSTALL_MAN:=install-man
endif


#########################################################################
ifeq ($(BR2_TOOLCHAIN_SOURCE),y)
TARGET_CFLAGS=
TARGET_LDFLAGS=
# flags that are inherent part of the tool
TARGET_CC_FLAGS=
TARGET_LD_FLAGS=

ifeq ($(BR2_TOOLCHAIN_SYSROOT),y)
TARGET_CC_FLAGS+= $(BR2_SYSROOT) $(BR2_ISYSROOT) -I=/usr/include
TARGET_LD_FLAGS+= $(BR2_SYSROOT)
else
# for old gcc's, as fallback
TARGET_CC_FLAGS+= -I$(STAGING_DIR)/usr/include -I$(STAGING_DIR)/include
endif
ifeq ($(BR2_ENABLE_MULTILIB),y)
TARGET_LD_FLAGS+= -L$(STAGING_DIR)/lib64 -L$(STAGING_DIR)/usr/lib64
endif
TARGET_LD_FLAGS+= -L$(STAGING_DIR)/lib -L$(STAGING_DIR)/usr/lib
TARGET_CFLAGS += $(TARGET_OPTIMIZATION) $(TARGET_DEBUGGING)

ifeq ($(BR2_bfin),y)
CC_TARGET_CPU_SUB_:=$(strip $(subst ",,$(BR2_bfin_sirevision)))
#"))
CC_TARGET_CPU_SUB_:=$(if $(CC_TARGET_CPU_SUB_),-$(CC_TARGET_CPU_SUB_))
endif

##############################################################################
#disabled
ifneq (XXX,XXX)
# gcc configury --with-foo
CC_TARGET_CPU_:=$(strip $(subst ",,$(BR2_GCC_TARGET_CPU)))
#"))
CC_TARGET_TUNE_:=$(strip $(subst ",,$(BR2_GCC_TARGET_TUNE)))
#"))
CC_TARGET_ARCH_:=$(strip $(subst ",,$(BR2_GCC_TARGET_ARCH)))
#"))
CC_TARGET_ABI_:=$(strip $(subst ",,$(BR2_GCC_TARGET_ABI)))
#"))

# fixup for MOTOROLA
ifeq ($(BR2_m68k),y)
CC_TARGET_ARCH_:=$(filter-out cf m68k,$(CC_TARGET_ARCH_))
endif

ifneq ($(strip $(CC_TARGET_CPU_)),)
TARGET_CFLAGS+=-mcpu=$(CC_TARGET_CPU_)$(CC_TARGET_CPU_SUB_)
endif
ifneq ($(strip $(CC_TARGET_TUNE_)),)
TARGET_CFLAGS+=-mtune=$(CC_TARGET_TUNE_)
endif
ifneq ($(strip $(CC_TARGET_ARCH_)),)
TARGET_CFLAGS+=-march=$(CC_TARGET_ARCH_)
endif
ifneq ($(strip $(CC_TARGET_ABI_)),)
TARGET_CFLAGS+=-mabi=$(CC_TARGET_ABI_)
endif

endif
##############################################################################


# CC -m{cpu,tune,arch,abi} FLAGS
CC_TARGET_FLAGS_CPU_:=$(strip $(subst ",,$(BR2_GCC_TARGET_FLAGS_CPU)))
#"))
CC_TARGET_FLAGS_SUBCPU_:=$(strip $(subst ",,$(BR2_GCC_TARGET_FLAGS_SUBCPU)))
#"))
CC_TARGET_FLAGS_TUNE_:=$(strip $(subst ",,$(BR2_GCC_TARGET_FLAGS_TUNE)))
#"))
CC_TARGET_FLAGS_ARCH_:=$(strip $(subst ",,$(BR2_GCC_TARGET_FLAGS_ARCH)))
#"))
CC_TARGET_FLAGS_ABI_:=$(strip $(subst ",,$(BR2_GCC_TARGET_FLAGS_ABI)))
#"))
ifneq ($(strip $(CC_TARGET_FLAGS_CPU_)),)
ifeq ($(BR2_bfin),y)
CC_TARGET_FLAGS_SUBCPU_SEPARATOR:=-
endif
TARGET_CFLAGS+=-mcpu=$(CC_TARGET_FLAGS_CPU_)$(if CC_TARGET_FLAGS_SUBCPU_,$(CC_TARGET_FLAGS_SUBCPU_SEPARATOR)$(CC_TARGET_FLAGS_SUBCPU_))
endif
ifneq ($(strip $(CC_TARGET_FLAGS_TUNE_)),)
TARGET_CFLAGS+=-mtune=$(CC_TARGET_FLAGS_TUNE_)
endif
ifneq ($(strip $(CC_TARGET_FLAGS_ARCH_)),)
TARGET_CFLAGS+=-march=$(CC_TARGET_FLAGS_ARCH_)
endif
ifneq ($(strip $(CC_TARGET_FLAGS_ABI_)),)
TARGET_CFLAGS+=-mabi=$(CC_TARGET_FLAGS_ABI_)
endif


ifneq ($(BR2_PREFER_STATIC_LIB),y)
ifeq ($(BR2_x86_64),y)
TARGET_CFLAGS+=-fPIC -DPIC
endif # PIC for dynamic objects on x86_64
endif

ifeq ($(BR2_SOFT_FLOAT),y)
TARGET_CFLAGS+=-msoft-float
endif

ifeq ($(BR2_THUMB_BINARIES),y)
TARGET_CFLAGS+=-mthumb
endif

# enable VIS for v9a and v9b
ifeq ($(findstring y,$(BR2_sparc_v9a)$(BR2_sparc64_v9a)$(BR2_sparc_v9b)$(BR2_sparc64_v9b)),y)
TARGET_CFLAGS+=-mvis
endif

ifeq ($(findstring yy,$(BR2_mips)$(BR2_MIPS_ABI64)),yy)
TARGET_CFLAGS+=-fno-pic -mno-abicalls
endif

TARGET_CXXFLAGS=$(TARGET_CFLAGS)
TARGET_FFLAGS=$(TARGET_CFLAGS)
TARGET_FCFLAGS=$(TARGET_CFLAGS)
TARGET_F77FLAGS=$(TARGET_CFLAGS)
TARGET_FC_FLAGS=$(TARGET_CC_FLAGS)

# else it's an external toolchain
#########################################################################
else
TARGET_CC_FLAGS=-I$(STAGING_DIR)/include -I$(STAGING_DIR)/usr/include -I$(TOOLCHAIN_EXTERNAL_PATH)/$(TOOLCHAIN_EXTERNAL_PREFIX)/include
TARGET_CFLAGS=$(TARGET_OPTIMIZATION) $(TARGET_DEBUGGING)
TARGET_CXXFLAGS=$(TARGET_CFLAGS)
TARGET_LD_FLAGS=-L$(STAGING_DIR)/lib -L$(STAGING_DIR)/usr/lib
endif
#########################################################################

ifeq ($(BR2_ENABLE_SSP),y)
TARGET_CFLAGS+=-fstack-protector -fstack-protector-all -Wstack-protector
endif

ifeq ($(BR2_TOOLCHAIN_SOURCE),y)
TOOL_BUILD_DIR=$(BASE_DIR)/$(TOPDIR_PREFIX)toolchain_build_$(ARCH)$(ARCH_FPU_SUFFIX)$(ARCH_MMU_SUFFIX)$(TOPDIR_SUFFIX)

# Quotes are needed for spaces et al in path components.
TARGET_PATH="$(TOOL_BUILD_DIR)/bin:$(STAGING_DIR)/bin:$(STAGING_DIR)/usr/bin:$(PATH)"
IMAGE:=$(BINARIES_DIR)/rootfs.$(ARCH)$(ARCH_FPU_SUFFIX)$(ARCH_MMU_SUFFIX)
GNU_TARGET_NAME=$(OPTIMIZE_FOR_CPU)-linux
REAL_GNU_TARGET_NAME=$(OPTIMIZE_FOR_CPU)$(GNU_TARGET_SUFFIX)
TARGET_CROSS=$(STAGING_DIR)/usr/bin/$(REAL_GNU_TARGET_NAME)-
KERNEL_CROSS=$(TARGET_CROSS)
else
TOOLCHAIN_EXTERNAL_PREFIX:=$(strip $(subst ",, $(BR2_TOOLCHAIN_EXTERNAL_PREFIX)))
#"))
TOOLCHAIN_EXTERNAL_PATH:=$(strip $(subst ",, $(BR2_TOOLCHAIN_EXTERNAL_PATH)))
#"))
TOOL_BUILD_DIR=$(BASE_DIR)/$(TOPDIR_PREFIX)toolchain_build_$(TOOLCHAIN_EXTERNAL_PREFIX)
TARGET_PATH="$(STAGING_DIR)/bin:$(TOOL_BUILD_DIR)/bin:$(TOOLCHAIN_EXTERNAL_PATH)/bin:$(PATH)"
IMAGE:=$(BINARIES_DIR)/rootfs.$(TOOLCHAIN_EXTERNAL_PREFIX)-$(DATE)

REAL_GNU_TARGET_NAME=$(TOOLCHAIN_EXTERNAL_PREFIX)
GNU_TARGET_NAME=$(TOOLCHAIN_EXTERNAL_PREFIX)
KERNEL_CROSS=$(TOOLCHAIN_EXTERNAL_PATH)/bin/$(TOOLCHAIN_EXTERNAL_PREFIX)-
TARGET_CROSS=$(TOOLCHAIN_EXTERNAL_PATH)/bin/$(TOOLCHAIN_EXTERNAL_PREFIX)-
endif
TARGET_AR=$(TARGET_CROSS)ar
TARGET_AS=$(TARGET_CROSS)as
TARGET_CC=$(TARGET_CROSS)gcc
TARGET_CPP=$(TARGET_CROSS)cpp
TARGET_CXX=$(TARGET_CROSS)g++
ifeq ($(BR2_GCC_VERSION_3_4_6),y)
TARGET_FC=$(TARGET_CROSS)g77
else
TARGET_FC=$(TARGET_CROSS)gfortran
endif
TARGET_LD=$(TARGET_CROSS)ld
TARGET_NM=$(TARGET_CROSS)nm
TARGET_RANLIB=$(TARGET_CROSS)ranlib
TARGET_OBJCOPY=$(TARGET_CROSS)objcopy
TARGET_OBJDUMP=$(TARGET_CROSS)objdump
TARGET_LDCONFIG=$(TARGET_CROSS)ldconfig
ifeq ($(BR2_STRIP_strip),y)
STRIP_DISCARD_ALL:=--discard-all
STRIP_STRIP_UNNEEDED:=--strip-unneeded
STRIP_STRIP_ALL:=--strip-all
REMOVE_SECTION_COMMENT:=--remove-section=.comment
REMOVE_SECTION_NOTE:=--remove-section=.note
TARGET_STRIP=$(TARGET_CROSS)strip
STRIPCMD=$(TARGET_CROSS)strip $(REMOVE_SECTION_COMMENT) $(REMOVE_SECTION_NOTE)
endif
ifeq ($(BR2_STRIP_sstrip),y)
STRIP_DISCARD_ALL:=
STRIP_STRIP_UNNEEDED:=
STRIP_STRIP_ALL:=
REMOVE_SECTION_COMMENT:=
REMOVE_SECTION_NOTE:=
TARGET_STRIP=$(STAGING_DIR)/usr/bin/$(REAL_GNU_TARGET_NAME)-sstrip
STRIPCMD=$(TARGET_STRIP)
endif
ifeq ($(BR2_STRIP_none),y)
TARGET_STRIP=true -Not_stripping
STRIPCMD=$(TARGET_STRIP)
endif
INSTALL=/usr/bin/install
FLEX:=$(shell $(CONFIG_SHELL) -c 'which flex || type -p flex')
BISON:=$(shell $(CONFIG_SHELL) -c 'which bison || type -p bison')

HOST_ARCH:=$(shell $(HOSTCC) -dumpmachine | sed -e s'/-.*//' \
	-e 's/sparc.*/sparc/' \
	-e 's/arm.*/arm/g' \
	-e 's/m68k.*/m68k/' \
	-e 's/ppc/powerpc/g' \
	-e 's/v850.*/v850/g' \
	-e 's/sh[234]/sh/' \
	-e 's/mips-.*/mips/' \
	-e 's/mipsel-.*/mipsel/' \
	-e 's/cris.*/cris/' \
	-e 's/i[3-9]86/i386/' \
	)
GNU_HOST_NAME:=$(HOST_ARCH)-$(subst ",,$(BR2_GNU_BUILD_SUFFIX))
#")

AUTO_CONFIGURE_TARGET=\
	$(TARGET_CONFIGURE_OPTS) \
	$(TARGET_CONFIGURE_ARGS) \
	$(TARGET_CONFIGURE_ENV) \
	$(if $(THIS_SRCDIR),$(THIS_SRCDIR)/,./)configure \
	--cache-file="$(PROJECT_BUILD_DIR)/tgt-config.cache" \
	--target=$(REAL_GNU_TARGET_NAME) \
	--host=$(REAL_GNU_TARGET_NAME) \
	--build=$(GNU_HOST_NAME)

TARGET_CONFIGURE_OPTS=\
	PATH=$(TARGET_PATH) \
	AR="$(TARGET_AR)" \
	AS="$(TARGET_AS)" \
	LD="$(TARGET_LD)$(if $(TARGET_LD_FLAGS), $(TARGET_LD_FLAGS))" \
	NM="$(TARGET_NM)" \
	CC="$(TARGET_CC)$(if $(TARGET_CC_FLAGS), $(TARGET_CC_FLAGS))" \
	GCC="$(TARGET_CC)$(if $(TARGET_CC_FLAGS), $(TARGET_CC_FLAGS))" \
	CPP="$(TARGET_CPP)$(if $(TARGET_CC_FLAGS), $(TARGET_CC_FLAGS))" \
	CXX="$(if $(BR2_GCC_CROSS_CXX),$(TARGET_CXX)$(if $(TARGET_CXXFLAGS), $(TARGET_CXXFLAGS)))" \
	FC="$(TARGET_FC)$(if $(TARGET_FC_FLAGS), $(TARGET_FC_FLAGS))" \
	RANLIB="$(TARGET_RANLIB)" \
	STRIP="$(TARGET_STRIP)" \
	OBJCOPY="$(TARGET_OBJCOPY)" \
	AR_FOR_BUILD="$(HOSTAR)" \
	AS_FOR_BUILD="$(HOSTAS)" \
	CC_FOR_BUILD="$(HOSTCC)" \
	GCC_FOR_BUILD="$(HOSTCC)" \
	CXX_FOR_BUILD="$(HOSTCXX)" \
	FC_FOR_BUILD="$(HOSTFC)" \
	LD_FOR_BUILD="$(HOSTLD)" \
	CFLAGS_FOR_BUILD="$(HOST_CFLAGS)" \
	CXXFLAGS_FOR_BUILD="$(HOST_CXXFLAGS)" \
	LDFLAGS_FOR_BUILD="$(HOST_LDFLAGS)" \
	FCFLAGS_FOR_BUILD="$(HOST_FCFLAGS)" \
	AR_FOR_TARGET="$(TARGET_AR)" \
	AS_FOR_TARGET="$(TARGET_AS)" \
	CC_FOR_TARGET="$(TARGET_CC)" \
	LD_FOR_TARGET="$(TARGET_LD)" \
	NM_FOR_TARGET="$(TARGET_NM)" \
	CXX_FOR_TARGET="$(if $(BR2_GCC_CROSS_CXX),$(TARGET_CXX))" \
	DEFAULT_ASSEMBLER="$(TARGET_AS)" \
	DEFAULT_LINKER="$(TARGET_LD)" \
	LIBTOOL="$(TOOL_BUILD_DIR)/bin/$(LIBTOOL_BINARY)" \
	LIBTOOLIZE="$(TOOL_BUILD_DIR)/bin/$(LIBTOOL_BINARY)ize" \
	PKG_CONFIG_SYSROOT="$(STAGING_DIR)" \
	PKG_CONFIG="$(STAGING_DIR)/usr/bin/pkg-config" \
	PKG_CONFIG_PATH="$(STAGING_DIR)/usr/lib/pkgconfig:$(PKG_CONFIG_PATH)" \
	PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 \
	PKG_CONFIG_ALLOW_SYSTEM_LIBS=1 \
	STAGING_DIR="$(STAGING_DIR)"

TARGET_CONFIGURE_ENV:=\
	CFLAGS="$(TARGET_CFLAGS)" \
	LDFLAGS="$(TARGET_LDFLAGS)" \
	CXXFLAGS="$(if $(BR2_GCC_CROSS_CXX),$(TARGET_CXXFLAGS))" \
	FFLAGS="$(TARGET_FFLAGS)" \
	FCFLAGS="$(TARGET_FCFLAGS)" \
	F77FLAGS="$(TARGET_F77FLAGS)" \

HOST_CONFIGURE_OPTS=\
	PATH=$(TARGET_PATH) \
	AR="$(HOSTAR)" \
	AS="$(HOSTAS)" \
	LD="$(HOSTLD)$(if $(HOST_LDFLAGS), $(HOST_LDFLAGS))" \
	NM="$(HOSTNM)" \
	CC="$(HOSTCC)$(if $(HOST_CFLAGS), $(HOST_CFLAGS))" \
	GCC="$(HOSTCC)$(if $(HOST_CFLAGS), $(HOST_CFLAGS))" \
	CXX="$(HOSTCXX)$(if $(HOST_CXXFLAGS), $(HOST_CXXFLAGS))" \
	CPP="$(HOSTCPP)$(if $(HOST_CFLAGS), $(HOST_CFLAGS))" \
	AR_FOR_BUILD="$(HOSTAR)" \
	AS_FOR_BUILD="$(HOSTAS)" \
	CC_FOR_BUILD="$(HOSTCC)" \
	GCC_FOR_BUILD="$(HOSTCC)" \
	CPP_FOR_BUILD="$(HOSTCPP)" \
	CXX_FOR_BUILD="$(HOSTCXX)" \
	LD_FOR_BUILD="$(HOSTLD)" \
	FC_FOR_BUILD="$(HOSTFC)" \
	CFLAGS_FOR_BUILD="$(HOST_CFLAGS)" \
	CXXFLAGS_FOR_BUILD="$(HOST_CXXFLAGS)" \
	LDFLAGS_FOR_BUILD="$(HOST_LDFLAGS)" \
	FCFLAGS_FOR_BUILD="$(HOST_FCFLAGS)" \
	AR_FOR_TARGET="$(TARGET_AR)" \
	AS_FOR_TARGET="$(TARGET_AS)" \
	CC_FOR_TARGET="$(TARGET_CC)" \
	CPP_FOR_TARGET="$(TARGET_CPP)" \
	LD_FOR_TARGET="$(TARGET_LD)" \
	NM_FOR_TARGET="$(TARGET_NM)" \
	CXX_FOR_TARGET="$(if $(BR2_GCC_CROSS_CXX),$(TARGET_CXX))" \
	RANLIB_FOR_TARGET="$(TARGET_RANLIB)" \
	STRIP_FOR_TARGET="$(TARGET_STRIP)" \
	OBJCOPY_FOR_TARGET="$(TARGET_OBJCOPY)" \
	OBJDUMP_FOR_TARGET="$(TARGET_OBJDUMP)" \
	DEFAULT_ASSEMBLER="$(TARGET_AS)" \
	DEFAULT_LINKER="$(TARGET_LD)" \
	ORIGINAL_AS_FOR_TARGET="$(TARGET_AS)" \
	ORIGINAL_LD_FOR_TARGET="$(TARGET_LD)" \
	ORIGINAL_NM_FOR_TARGET="$(TARGET_NM)" \
	ORIGINAL_OBJDUMP_FOR_TARGET="$(TARGET_OBJDUMP)"

#######################################################################
# settings we need to pass to configure

# does unaligned access trap?
BR2_AC_CV_TRAP_CHECK=ac_cv_lbl_unaligned_fail=yes
ifeq ($(BR2_i386),y)
BR2_AC_CV_TRAP_CHECK=ac_cv_lbl_unaligned_fail=no
endif
ifeq ($(BR2_x86_64),y)
BR2_AC_CV_TRAP_CHECK=ac_cv_lbl_unaligned_fail=no
endif
ifeq ($(BR2_m68k),y)
BR2_AC_CV_TRAP_CHECK=ac_cv_lbl_unaligned_fail=no
endif
ifeq ($(BR2_s390),y)
BR2_AC_CV_TRAP_CHECK=ac_cv_lbl_unaligned_fail=no
endif
ifeq ($(BR2_powerpc)$(BR2_ENDIAN),yBIG)
BR2_AC_CV_TRAP_CHECK=ac_cv_lbl_unaligned_fail=no
endif

ifeq ($(BR2_ENDIAN),"BIG")
BR2_AC_CV_C_BIGENDIAN=ac_cv_c_bigendian=yes
else
BR2_AC_CV_C_BIGENDIAN=ac_cv_c_bigendian=no
endif

# uClibc's config symbols reside in BR2__UCLIBC_${uclibc_config_sym}=${val}
# Does malloc return live pointer for malloc(0) ?

#ifeq ($(BR2__UCLIBC_MALLOC_GLIBC_COMPAT),y)
# just lie
ifeq (XXX,XXX)
BR2_AC_CV_FUNC_MALLOC_0_NONNULL=ac_cv_func_malloc_0_nonnull=yes \
				gl_cv_func_malloc_0_nonnull=yes \
				ac_cv_func_realloc_0_nonnull=yes
else
BR2_AC_CV_FUNC_MALLOC_0_NONNULL=ac_cv_func_malloc_0_nonnull=no \
				gl_cv_func_malloc_0_nonnull=no \
				ac_cv_func_realloc_0_nonnull=no
endif
ifeq ($(BR2__UCLIBC_UCLIBC_HAS_SYS_ERRLIST),y)
BR2_AC_CV_HAVE_DECL_ERRLIST=ac_cv_have_decl_sys_errlist=yes
else
BR2_AC_CV_HAVE_DECL_ERRLIST=ac_cv_have_decl_sys_errlist=no
endif
ifeq ($(BR2__UCLIBC_UCLIBC_HAS_SYS_SIGLIST),y)
BR2_AC_CV_HAVE_DECL_SIGLIST=ac_cv_have_decl_sys_siglist=yes
else
BR2_AC_CV_HAVE_DECL_SIGLIST=ac_cv_have_decl_sys_siglist=no
endif
ifeq ($(BR_LARGEFILE),y)
BR2_AC_CV_TYPE_STAT64=ac_cv_type_stat64=yes
else
BR2_AC_CV_TYPE_STAT64=ac_cv_type_stat64=no
endif

ifeq ($(findstring y,$(BR2__UCLIBC_UCLIBC_SUSV3_LEGACY)$(BR2__UCLIBC_UCLIBC_SUSV3_LEGACY_MACROS)),y)
BR2_AC_CV_SUSV3_LEGACY=
endif

TARGET_CONFIGURE_ARGS= \
	$(BR2_AC_CV_TRAP_CHECK) \
	ac_cv_func_mmap_fixed_mapped=yes \
	ac_cv_func_memcmp_working=yes \
	$(BR2_AC_CV_FUNC_MALLOC_0_NONNULL) \
	$(BR2_AC_CV_HAVE_DECL_ERRLIST) \
	$(BR2_AC_CV_HAVE_DECL_SIGLIST) \
	$(BR2_AC_CV_TYPE_STAT64) \
	ac_cv_type_mode_t=yes \
	ac_cv_func_getpgrp_void=yes \
	ac_cv_prog_LEX="$(FLEX)" \
	ac_cv_prog_YACC="$(BISON) $($(PKG)_BISON_FLAGS)" \
	$(BR2_AC_CV_C_BIGENDIAN) \
	$(BR2_AC_CV_SUSV3_LEGACY)

#######################################################################

#ifneq ($(BR2_GCC_CROSS_CXX),y)
#TARGET_CONFIGURE_OPTS+=CXX=""
#endif



# X Windowing system

XSERVER:=
ifeq ($(BR2_PACKAGE_TINYX),y)
XSERVER+=tinyx
endif
ifeq ($(BR2_PACKAGE_XORG),y)
XSERVER+=xorg
endif
ifeq ($(BR2_PACKAGE_XORG7),y)
XSERVER+=xserver_xorg-server
endif
ifeq ($(BR2_PACKAGE_XGGI),y)
XSERVER+=xggi
endif

X11_PREFIX:=$(strip $(subst ",, $(BR2_X11_PREFIX)))
#"))

include package/Makefile.autotools.in

